// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// title, couponCode, expiryDate
model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
  //datetime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  //datetime    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// RELATIONSHIP
// 1 to 1 reationship => user => profile relationship
// 1 to  many relationship => category => product relationship
// many to many relationship => Market => Category

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  products    Product[]
  training    Training[]

  marketIds String[] @db.ObjectId
  markets   Market[] @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  logoUrl     String?
  description String?
  isActive    Boolean

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  barCode        String?
  title          String
  slug           String   @unique
  imageUrl       String?
  description    String?
  isActive       Boolean?
  sku            String?
  productPrice   Float
  tags           String[]
  salePrice      Float
  qty            Int
  isWholeSale    Boolean
  productCode    String
  unit           String
  wholeSalePrice Float
  wholeSaleQty   Int
  productStock   Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

//

model Training {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String
  description String?
  content     String
  isActive    Boolean

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
  FARMER
  MODERATOR
}

enum Gender {
  MEN
  FEMALE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?

  products Product[]

  role UserRole @default(USER)

  farmerProfile FarmerProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FarmerProfile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  contactPerson      String?
  contactPersonPhone String?
  profileImageUrl    String?
  email              String
  name               String
  notes              String?
  phone              String
  physicalAddress    String?
  terms              String?
  isActive           Boolean
  product            String[]
  landSize           Float
  mainCrop           String
  code               String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// User =>Admin,Farmer,coustemr,Agent  

//model  Profile{
//id Int @id @default(autoincrement())
//user User @relation(fields:[userId],references: [id])
//userId Int @unique
//}
